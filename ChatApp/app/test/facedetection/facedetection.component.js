"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var element_registry_1 = require("nativescript-angular/element-registry");
var firebase = require("nativescript-plugin-firebase");
var barcodescanning_1 = require("nativescript-plugin-firebase/mlkit/barcodescanning");
var image_source_1 = require("tns-core-modules/image-source");
var file_system_1 = require("tns-core-modules/file-system");
var FacedetectionComponent = /** @class */ (function () {
    function FacedetectionComponent() {
        // registerElement("MLKitTextRecognition", () => require("nativescript-plugin-firebase/mlkit/textrecognition").MLKitTextRecognition);
        // registerElement("MLKitFaceDetection", () => require("nativescript-plugin-firebase/mlkit/facedetection").MLKitFaceDetection);
        // registerElement("MLKitBarcodeScanner", () => require("nativescript-plugin-firebase/mlkit/barcodescanning").MLKitBarcodeScanner);
        element_registry_1.registerElement("MLKitImageLabeling", function () { return require("nativescript-plugin-firebase/mlkit/imagelabeling").MLKitImageLabeling; });
    }
    FacedetectionComponent.prototype.ngOnInit = function () { };
    FacedetectionComponent.prototype.onImageLabelingResult = function (scanResult) {
        var value = scanResult.value;
        this.labels = value.labels;
        this.labels.forEach(function (label) {
            console.log(label);
        });
    };
    //------------------------ firebase ml kit test ------------------
    FacedetectionComponent.prototype.textRecognition = function () {
        var folder = file_system_1.knownFolders.currentApp();
        var folderPath = file_system_1.path.join(folder.path, "./images/Wege_der_parlamentarischen_Demokratie.jpg");
        var imageSource = image_source_1.fromFile(folderPath);
        console.log(imageSource);
        firebase.mlkit.textrecognition.recognizeTextOnDevice({
            image: imageSource // a NativeScript Image or ImageSource, see the demo for examples
        }).then(function (result) {
            console.log(result.text ? result.text : "");
        }).catch(function (errorMessage) { return console.log("ML Kit error: " + errorMessage); });
    };
    FacedetectionComponent.prototype.faceDetection = function () {
        var folder = file_system_1.knownFolders.currentApp();
        var folderPath = file_system_1.path.join(folder.path, "./images/sansoo.jpg");
        var imageSource = image_source_1.fromFile(folderPath);
        firebase.mlkit.facedetection.detectFacesOnDevice({
            image: imageSource,
            detectionMode: "accurate",
            enableFaceTracking: true,
            minimumFaceSize: 0.25 // default 0.1 (which means the face must be at least 10% of the image)
        })
            .then(function (result) { return console.log(JSON.stringify(result.faces)); })
            .catch(function (errorMessage) { return console.log("ML Kit error: " + errorMessage); });
    };
    FacedetectionComponent.prototype.barcodeScanning = function () {
        var folder = file_system_1.knownFolders.currentApp();
        var folderPath = file_system_1.path.join(folder.path, "./images/qrcode.png");
        var imageSource = image_source_1.fromFile(folderPath);
        firebase.mlkit.barcodescanning.scanBarcodesOnDevice({
            image: imageSource,
            formats: [barcodescanning_1.BarcodeFormat.QR_CODE, barcodescanning_1.BarcodeFormat.CODABAR] // limit recognition to certain formats (faster), or leave out entirely for all formats (default)
        })
            .then(function (result) { return console.log(JSON.stringify(result.barcodes)); })
            .catch(function (errorMessage) { return console.log("ML Kit error: " + errorMessage); });
        var folderPath2 = file_system_1.path.join(folder.path, "./images/EAN-Obst.jpg");
        var imageSource2 = image_source_1.fromFile(folderPath2);
        firebase.mlkit.barcodescanning.scanBarcodesOnDevice({
            image: imageSource2,
            formats: [barcodescanning_1.BarcodeFormat.EAN_13] // limit recognition to certain formats (faster), or leave out entirely for all formats (default)
        })
            .then(function (result) { return console.log(JSON.stringify(result.barcodes)); })
            .catch(function (errorMessage) { return console.log("ML Kit error: " + errorMessage); });
    };
    FacedetectionComponent.prototype.imageLabeling = function () {
        var folder = file_system_1.knownFolders.currentApp();
        var folderPath = file_system_1.path.join(folder.path, "./images/1024px-Valais_Cup_2013_-_OM-FC_Porto_13-07-2013_-_Brice_Samba_en_extension.jpg");
        var imageSource = image_source_1.fromFile(folderPath);
        firebase.mlkit.imagelabeling.labelImageOnDevice({
            image: imageSource,
            confidenceThreshold: 0.6 // this will only return labels with at least 0.6 (60%) confidence. Default 0.5.
        })
            .then(function (result) { return console.log(JSON.stringify(result.labels)); })
            .catch(function (errorMessage) { return console.log("ML Kit error: " + errorMessage); });
        firebase.mlkit.imagelabeling.labelImageCloud({
            image: imageSource,
            modelType: "stable",
            maxResults: 5 // default 10
        })
            .then(function (result) { return console.log(JSON.stringify(result.labels)); })
            .catch(function (errorMessage) { return console.log("ML Kit error: " + errorMessage); });
    };
    FacedetectionComponent.prototype.landmarkRecognition = function () {
        var folder = file_system_1.knownFolders.currentApp();
        var folderPath = file_system_1.path.join(folder.path, "./images/680px-Bruegge_View_from_Rozenhoedkaai.jpg");
        var imageSource = image_source_1.fromFile(folderPath);
        firebase.mlkit.landmarkrecognition.recognizeLandmarksCloud({
            image: imageSource,
            modelType: "latest",
            maxResults: 8 // default 10
        })
            .then(function (result) { return console.log(JSON.stringify(result.landmarks)); })
            .catch(function (errorMessage) { return console.log("ML Kit error: " + errorMessage); });
    };
    FacedetectionComponent.prototype.customModel = function () {
        firebase.mlkit.custommodel.useCustomModel({
            // image: imageSource, // a NativeScript Image or ImageSource, see the demo for examples
            maxResults: 10,
            localModelFile: "~/custommodel/inception/inception_v3_quant.tflite",
            labelsFile: "~/custommodel/inception/inception_labels.txt",
            modelInput: [{
                    shape: [1, 299, 299, 3],
                    type: "QUANT" // for now, must be "QUANT" (and you should use a 'quantized' model (not 'float'))
                }]
        })
            .then(function (result) { return console.log(JSON.stringify(result.result)); })
            .catch(function (errorMessage) { return console.log("ML Kit error: " + errorMessage); });
    };
    FacedetectionComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'Facedetection',
            templateUrl: './facedetection.component.html',
            styleUrls: ['./facedetection.component.scss']
        }),
        __metadata("design:paramtypes", [])
    ], FacedetectionComponent);
    return FacedetectionComponent;
}());
exports.FacedetectionComponent = FacedetectionComponent;
//# sourceMappingURL=data:application/json;base64,