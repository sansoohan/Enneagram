"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("nativescript-angular/router");
var ApplicationSettings = require("application-settings");
var firebase_service_1 = require("../services/firebase.service");
var page_1 = require("tns-core-modules/ui/page");
var auth_model_1 = require("./auth.model");
var LoginComponent = /** @class */ (function () {
    // private androidInterstitialId: string = "ca-app-pub-3940256099942544/6300978111";
    // private iosBannerId: string = "ca-app-pub-RRRR/TTTT";
    // private iosInterstitialId: string = "ca-app-pub-GGGG/HHHH";
    function LoginComponent(router, routerExtensions, firebaseService, page) {
        this.router = router;
        this.routerExtensions = routerExtensions;
        this.firebaseService = firebaseService;
        this.page = page;
        this.auth = new auth_model_1.Auth();
        this.androidBannerId = "ca-app-pub-5445779750154576/7005154644";
        // this.showBanner();
    }
    LoginComponent.prototype.ngOnInit = function () {
        if (ApplicationSettings.getBoolean("authenticated", false)) {
            this.router.navigate(["/home"], { clearHistory: true });
            this.firebaseService.setCurrentUser();
        }
        this.page.actionBarHidden = true;
    };
    LoginComponent.prototype.loginByEmail = function (auth) {
        this.firebaseService.loginByEmail(auth);
    };
    LoginComponent.prototype.loginByFacebook = function () {
        this.firebaseService.loginByFacebook();
    };
    LoginComponent.prototype.loginByGoogle = function () {
        this.firebaseService.loginByGoogle();
    };
    LoginComponent.prototype.handleInput = function (args) {
    };
    LoginComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: "rr-login",
            templateUrl: "login.component.html",
            styleUrls: ['./login.component.css'],
        }),
        __metadata("design:paramtypes", [router_1.RouterExtensions,
            router_1.RouterExtensions,
            firebase_service_1.FirebaseService,
            page_1.Page])
    ], LoginComponent);
    return LoginComponent;
}());
exports.LoginComponent = LoginComponent;
//# sourceMappingURL=data:application/json;base64,