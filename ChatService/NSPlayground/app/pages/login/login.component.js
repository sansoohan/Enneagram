"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("nativescript-angular/router");
var firebase_service_1 = require("~/services/firebase.service");
var page_1 = require("tns-core-modules/ui/page");
var auth_model_1 = require("./auth.model");
var LoginComponent = /** @class */ (function () {
    function LoginComponent(router, routerExtensions, firebaseService, page) {
        this.router = router;
        this.routerExtensions = routerExtensions;
        this.firebaseService = firebaseService;
        this.page = page;
        this.auth = new auth_model_1.Auth();
        this.androidBannerId = "ca-app-pub-5445779750154576/7005154644";
        // private androidInterstitialId: string = "ca-app-pub-3940256099942544/6300978111";
        // private iosBannerId: string = "ca-app-pub-RRRR/TTTT";
        // private iosInterstitialId: string = "ca-app-pub-GGGG/HHHH";
        this.tap = new core_1.EventEmitter();
        // this.showBanner();
    }
    LoginComponent.prototype.ngOnInit = function () {
        this.page.actionBarHidden = true;
    };
    LoginComponent.prototype.loginByEmail = function (auth) {
        this.firebaseService.loginByEmail(auth);
    };
    LoginComponent.prototype.loginByFacebook = function () {
        this.firebaseService.loginByFacebook();
    };
    LoginComponent.prototype.loginByGoogle = function () {
        this.firebaseService.loginByGoogle();
    };
    LoginComponent.prototype.handleInput = function (args) {
    };
    LoginComponent.prototype.onRegisterTap = function (args) {
        this.tap.emit(args);
    };
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], LoginComponent.prototype, "tap", void 0);
    LoginComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: "Login",
            templateUrl: "login.component.html",
            styleUrls: ['./login.component.css'],
        }),
        __metadata("design:paramtypes", [router_1.RouterExtensions,
            router_1.RouterExtensions,
            firebase_service_1.FirebaseService,
            page_1.Page])
    ], LoginComponent);
    return LoginComponent;
}());
exports.LoginComponent = LoginComponent;
//# sourceMappingURL=data:application/json;base64,